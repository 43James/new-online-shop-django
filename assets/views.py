
from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.auth.decorators import login_required
from accounts.models import MyUser
from app_linebot.models import UserLine, UserLine_Asset
from app_linebot.views import notify_admin_assetloan, notify_admin_on_auto_loan, notify_admin_on_return, notify_borrower
from assets.models import AssetCode, AssetItem, AssetCheck, AssetItemLoan, AssetReservation, StorageLocation, AssetCategory, Subcategory, StorageLocation,OrderAssetLoan,IssuingAssetLoan
from dashboard.views import thai_month_name
from .forms import ApproveLoanForm, AssetCheckForm, AssetCodeForm, AssetItemForm, AssetItemLoanForm, CategoryForm, LoanForm, ReservationForm, SubcategoryForm, StorageLocationForm,StorageLocationForm
from django.utils import timezone
from django.contrib import messages
from django.db.models import Q, Prefetch
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.conf import settings
import qrcode
from django.views.decorators.http import require_POST
from django.http import JsonResponse
from django.db import IntegrityError, transaction
from io import BytesIO
from datetime import date
from django.core.files.base import ContentFile
from datetime import datetime, timedelta
from django.http import JsonResponse
import json # ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÇ‡∏°‡∏î‡∏π‡∏• json
from linebot import LineBotApi
from linebot.models import TextSendMessage
from django.conf import settings


@login_required
def home_assets(request):
    return render(request, 'home_assets.html')

# ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå
@login_required
def asset_list(request):
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    assets_list = AssetItem.objects.all().order_by('id')

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á Paginator object
    paginator = Paginator(assets_list, 10) # ‡πÅ‡∏™‡∏î‡∏á 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤

    page = request.GET.get('page')
    try:
        assets = paginator.page(page)
    except PageNotAnInteger:
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤ ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
        assets = paginator.page(1)
    except EmptyPage:
        # ‡∏ñ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
        assets = paginator.page(paginator.num_pages)
    
    # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• assets ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏õ‡∏¢‡∏±‡∏á template
    return render(request, 'asset_list.html', {'assets': assets})

@login_required
def add_asset_item(request):
    categories = AssetCategory.objects.prefetch_related("subcategories").all()

    if request.method == "POST":
        asset_code_form = AssetCodeForm(request.POST)
        asset_item_form = AssetItemForm(request.POST, request.FILES)

        if asset_code_form.is_valid() and asset_item_form.is_valid():
            try:
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å AssetCode ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ serial_year ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                asset_code = asset_code_form.save()
                
                # ‡∏ú‡∏π‡∏Å asset_code ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                asset_item = asset_item_form.save(commit=False)
                asset_item.asset_code = asset_code
                
                # ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô save() ‡∏Ç‡∏≠‡∏á AssetItem ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ß‡πâ
                asset_item.save()

                messages.success(request, "‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                return redirect("assets:asset_list")

            except IntegrityError:
                # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà serial_year ‡∏ã‡πâ‡∏≥
                messages.error(request, "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡∏£‡∏´‡∏±‡∏™‡∏•‡∏≥‡∏î‡∏±‡∏ö/‡∏õ‡∏µ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
            except Exception as e:
                messages.error(request, f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
        else:
            messages.error(request, "‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°")
    else:
        asset_code_form = AssetCodeForm()
        asset_item_form = AssetItemForm()

    return render(request, "add_asset_item.html", {
        "asset_code_form": asset_code_form,
        "asset_item_form": asset_item_form,
        "categories": categories,
    })


# ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå
@login_required
def asset_detail(request, pk):
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå"""
    asset = get_object_or_404(AssetItem, pk=pk)
    # ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô calculate_annual_depreciation
    annual_depreciation = asset.calculate_annual_depreciation()
    return render(request, 'asset_detail.html', {
        'asset': asset,
        'annual_depreciation': annual_depreciation
    })


# ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå
@login_required
def asset_edit(request, pk):
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå"""
    asset = get_object_or_404(AssetItem, pk=pk)
    
    if request.method == 'POST':
        asset_item_form = AssetItemForm(request.POST, request.FILES, instance=asset)
        asset_code_form = AssetCodeForm(request.POST, instance=asset.asset_code)
        
        if asset_item_form.is_valid() and asset_code_form.is_valid():
            try:
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å asset_code ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô IntegrityError
                asset_code_form.save()
                
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å asset_item ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á commit ‡∏Å‡πà‡∏≠‡∏ô
                asset_item = asset_item_form.save(commit=False)
                
                # ‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ò‡∏≠‡∏î save() ‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• AssetItem ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÑ‡∏ß‡πâ
                # ‡∏ã‡∏∂‡πà‡∏á‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏∑‡πà‡∏≠‡∏°‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á QR code ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
                asset_item.save()

                messages.success(request, '‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß')
                return redirect('assets:asset_detail', pk=asset.pk)
            
            except IntegrityError:
                # ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà serial_year ‡∏ã‡πâ‡∏≥
                messages.error(request, '‚ùå ‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå (‡∏•‡∏≥‡∏î‡∏±‡∏ö/‡∏õ‡∏µ) ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö')
            except Exception as e:
                messages.error(request, f'‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}')
        else:
            messages.error(request, '‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°')
    else:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ edit
        asset_item_form = AssetItemForm(instance=asset)
        asset_code_form = AssetCodeForm(instance=asset.asset_code)
    
    categories = AssetCategory.objects.prefetch_related("subcategories").all()
    
    return render(request, 'asset_edit.html', {
        'asset_item_form': asset_item_form,
        'asset_code_form': asset_code_form,
        'asset': asset,
        'categories': categories,
    })

# ‡∏•‡∏ö‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå
@login_required
def asset_delete(request, pk):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå
    ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö POST request ‡∏à‡∏≤‡∏Å Modal ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ asset_list ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    """
    if request.method == 'POST':
        asset = get_object_or_404(AssetItem, pk=pk)
        asset_code_to_delete = asset.asset_code
        asset.delete()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ä‡πâ AssetCode ‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡πâ‡∏•‡∏ö‡∏ó‡∏¥‡πâ‡∏á
        if not AssetItem.objects.filter(asset_code=asset_code_to_delete).exists():
            asset_code_to_delete.delete()
            
        messages.success(request, 'üóëÔ∏è ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß')
        return redirect('assets:asset_list')
        
    # ‡∏´‡∏≤‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á URL ‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢ GET request ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å redirect ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    return redirect('assets:asset_list')

# -------------------------------------------------------------------------------------------------------------------------------------------

# ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏≠‡∏á‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå
# @login_required
# def create_asset_ownership(request):
#     if request.method == 'POST':
#         form = AssetOwnershipForm(request.POST)
#         if form.is_valid():
#             form.save()
#             return redirect('assets:ownership_list')  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏≠‡∏á‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå
#     else:
#         form = AssetOwnershipForm()
#     return render(request, 'create_asset_ownership.html', {'form': form})


# ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå
@login_required
def check_asset(request, asset_id):
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏ä‡πá‡∏Ñ
    asset = get_object_or_404(AssetItem, id=asset_id)
    storage_locations = StorageLocation.objects.all()  # ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

    if request.method == "POST":
        form = AssetCheckForm(request.POST, asset=asset)
        if form.is_valid():
            form.save(user=request.user)
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö
            asset.storage_location_id = request.POST.get("storage_location")
            asset.save()
            return redirect('assets:asset_list')  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏´‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    else:
        form = AssetCheckForm(asset=asset)

    return render(request, "asset_check_form.html", {"form": form, "asset": asset, "storage_locations": storage_locations})

# ------------------------------------------------------------------------------------------------------------------------------------

# ------------------------------
# ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå
# ------------------------------
@login_required
def add_asset_item_loan(request):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏°
    """
    categories = AssetCategory.objects.prefetch_related("subcategories").all()

    if request.method == 'POST':
        form = AssetItemLoanForm(request.POST, request.FILES)
        if form.is_valid():
            asset_item = form.save(commit=False)
            asset_item.save()
            # ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (messages) ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
            return redirect('assets:loan_list')  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô URL ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    else:
        form = AssetItemLoanForm()
    
    return render(request, 'add_asset_item_loan.html', 
                  {'form': form,
                  "categories": categories,
                  })

# ------------------------------------
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏°
# ------------------------------------
@login_required
def edit_asset_item_loan(request, pk):
    
    asset_item = get_object_or_404(AssetItemLoan, pk=pk)
    categories = AssetCategory.objects.prefetch_related("subcategories").all()

    if request.method == 'POST':
        form = AssetItemLoanForm(request.POST, request.FILES, instance=asset_item)
        if form.is_valid():
            form.save()
            messages.success(request, '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß')
            return redirect('assets:loan_list')
    else:
        form = AssetItemLoanForm(instance=asset_item)
    
    context = {
        'form': form,
        'asset_item': asset_item,
        'categories': categories,
    }
    return render(request, 'edit_asset_item_loan.html', context)


def delete_asset_item_loan(request, pk):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏°
    """
    if request.method == 'POST':
        asset_item = get_object_or_404(AssetItemLoan, pk=pk)
        asset_item.delete()
        messages.success(request, '‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß')
        return redirect('assets:loan_list')
    # ‡∏´‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏î‡πâ‡∏ß‡∏¢ method ‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà POST (‡πÄ‡∏ä‡πà‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå URL ‡∏ï‡∏£‡∏á‡πÜ)
    messages.error(request, '‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á')
    return redirect('assets:loan_list')


@login_required
def calendar_view(request):
    """‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ó‡∏°‡πÄ‡∏û‡∏•‡∏ï‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô"""
    return render(request, "calendar.html")


# @login_required
# def calendar_events(request):
#     """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°/‡∏à‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÉ‡∏´‡πâ FullCalendar"""
#     events = []

#     # üé® Mapping ‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
#     status_colors = {
#         "approved": "#28a745",   # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß = ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
#         "borrowed": "#28a745",   # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß = ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏°
#         "pending":  "#FFA500",   # ‡∏™‡πâ‡∏° = ‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
#         "overdue":  "#FF0000",   # ‡∏™‡πâ‡∏° = ‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
#     }

#     # üü¢ ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ approved, borrowed, pending)
#     loans = (
#         OrderAssetLoan.objects
#         .filter(status__in=status_colors.keys())
#         .select_related("user")
#     )

#     for loan in loans:
#         issued_assets = loan.items.all()
#         asset_images_urls = []
#         asset_names = []
#         for issued_asset in issued_assets:
#             if issued_asset.asset and issued_asset.asset.asset_image:
#                 asset_images_urls.append(request.build_absolute_uri(issued_asset.asset.asset_image.url))
#             if issued_asset.asset:
#                 asset_names.append(issued_asset.asset.item_name)
        
#         start_time_loan = timezone.localtime(loan.date_created) if loan.date_created else None
#         end_time_loan = timezone.localtime(loan.date_due) if loan.date_due else None

#         events.append({
#             "title": f"{loan.user.get_first_name()} ‡∏¢‡∏∑‡∏° : ({', '.join(asset_names)}) {loan.get_status_display()}",
#             "start": start_time_loan.isoformat() if start_time_loan else None,
#             "end": end_time_loan.isoformat() if end_time_loan else None,
#             "color": status_colors.get(loan.status, "#6c757d"),
#             "extendedProps": {
#                 "status": loan.get_status_display(),
#                 "status_color": status_colors.get(loan.status, "#6c757d"), # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡πÉ‡∏ô extendedProps
#                 "user": loan.user.get_full_name(),
#                 "note": loan.note or "",
#                 "total_assets": loan.get_total_assets, # ‡πÄ‡∏Å‡πá‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
#                 "asset_names": ", ".join(asset_names),
#                 "asset_images": asset_images_urls,
#             }
#         })

#     # üü° ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå
#     reservations = (
#         AssetReservation.objects
#         .select_related("user", "asset")
#     )

#     for r in reservations:
#         asset_image_url = None
#         if r.asset and r.asset.asset_image:
#             asset_image_url = request.build_absolute_uri(r.asset.asset_image.url)

#         start_time_res = timezone.localtime(r.reserved_date) if r.reserved_date else None
#         end_time_res = timezone.localtime(r.returning_date) if r.returning_date else None

#         events.append({
#             "title": f"{r.user.get_first_name()} ‡∏à‡∏≠‡∏á : ({r.asset.item_name})",
#             "start": start_time_res.isoformat() if start_time_res else None,
#             "end": end_time_res.isoformat() if end_time_res else None,
#             "color": "#FFD700",
#             "extendedProps": {
#                 "status": "‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß",
#                 "status_color": "#FFD700", # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≠‡∏á
#                 "user": r.user.get_full_name(),
#                 "asset": r.asset.item_name,
#                 "notes": r.notes or "",
#                 "asset_image": asset_image_url,
#             }
#         })

#     return JsonResponse(events, safe=False)

@login_required
def calendar_events(request):
    """‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°/‡∏à‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÉ‡∏´‡πâ FullCalendar"""
    events = []

    # üé® Mapping ‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    status_colors = {
        "approved": "#28a745",   # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß = ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
        "borrowed": "#28a745",   # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß = ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏°
        "pending":  "#FF6600",   # ‡∏™‡πâ‡∏° = ‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
        "overdue":  "#FF0000",   # ‡πÅ‡∏î‡∏á = ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    }

    # üü¢ ‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå
    # ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ OrderAssetLoan.objects ‡πÅ‡∏•‡∏∞ AssetReservation.objects ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô scope ‡∏ô‡∏µ‡πâ
    loans = (
        OrderAssetLoan.objects
        .filter(status__in=status_colors.keys())
        .select_related("user")
    )

    for loan in loans:
        issued_assets = loan.items.all()
        asset_images_urls = []
        asset_names = []
        for issued_asset in issued_assets:
            if issued_asset.asset and issued_asset.asset.asset_image:
                # ‡πÉ‡∏ä‡πâ request.build_absolute_uri ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ï‡πá‡∏°
                asset_images_urls.append(request.build_absolute_uri(issued_asset.asset.asset_image.url))
            if issued_asset.asset:
                asset_names.append(issued_asset.asset.item_name)
        
        # *** ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Timezone: ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô Timezone-aware UTC) ***
        start_time_loan = loan.date_of_use 
        end_time_loan = loan.date_due 
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô/‡πÄ‡∏ß‡∏•‡∏≤‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å .isoformat()
        start_iso = start_time_loan.isoformat() if start_time_loan else None
        end_iso = end_time_loan.isoformat() if end_time_loan else None

        events.append({
            "title": f"{loan.user.get_first_name()} ‡∏¢‡∏∑‡∏° : ({', '.join(asset_names)}) {loan.get_status_display()}",
            "start": start_iso,
            "end": end_iso,
            "color": status_colors.get(loan.status, "#6c757d"),
            "extendedProps": {
                "status": loan.get_status_display(),
                "status_color": status_colors.get(loan.status, "#6c757d"),
                "user": loan.user.get_full_name(),
                "note": loan.note or "",
                "total_assets": loan.get_total_assets,
                "asset_names": ", ".join(asset_names),
                "asset_images": asset_images_urls,
            }
        })

    # üü° ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå
    reservations = (
        AssetReservation.objects
        .select_related("user", "asset")
    )

    for r in reservations:
        asset_image_url = None
        if r.asset and r.asset.asset_image:
            asset_image_url = request.build_absolute_uri(r.asset.asset_image.url)

        # *** ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Timezone: ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ***
        start_time_res = r.reserved_date 
        end_time_res = r.returning_date 
        
        start_iso = start_time_res.isoformat() if start_time_res else None
        end_iso = end_time_res.isoformat() if end_time_res else None


        events.append({
            "title": f"{r.user.get_first_name()} ‡∏à‡∏≠‡∏á : ({r.asset.item_name})",
            "start": start_iso,
            "end": end_iso,
            "color": "#FFD700",
            "extendedProps": {
                "status": "‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß",
                "status_color": "#FFD700", 
                "user": r.user.get_full_name(),
                "asset": r.asset.item_name,
                "notes": r.notes or "",
                "asset_image": asset_image_url,
            }
        })

    return JsonResponse(events, safe=False)

# ------------------------------
# ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏∑‡∏°
# ------------------------------
@login_required
def loan_list(request):
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£ query ‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    asset_items_query = AssetItemLoan.objects.all()
    
    has_line_account = False
    if request.user.is_authenticated:
        # UserLine_Asset.objects.filter(user=request.user).exists()
        # ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ try: request.user.userline_asset
        
        # ‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞ MyUser ‡∏°‡∏µ UserLine_Asset ‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
        # ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Ñ‡πà‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ OneToOneField ‡πÅ‡∏ó‡∏ô) ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ try-except ‡πÑ‡∏î‡πâ
        
        # ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ForeignKey:
        has_line_account = UserLine_Asset.objects.filter(user=request.user).exists()

    # Prefetch ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    asset_items_query = asset_items_query.prefetch_related(
        Prefetch('assetreservation_set',
                 queryset=AssetReservation.objects.order_by('reserved_date'),
                 to_attr='current_reservation')
    )
    
    query = request.GET.get("q", "")
    category_id = request.GET.get("category")
    subcategory_id = request.GET.get("subcategory")
    
    if query:
        asset_items_query = asset_items_query.filter(
            Q(item_name__icontains=query) |
            Q(asset_code__icontains=query)
        )

    selected_category = None
    if category_id:
        selected_category = get_object_or_404(AssetCategory, id=category_id)
        asset_items_query = asset_items_query.filter(subcategory__category=selected_category)

    selected_subcategory = None
    if subcategory_id:
        selected_subcategory = get_object_or_404(Subcategory, id=subcategory_id)
        asset_items_query = asset_items_query.filter(subcategory=selected_subcategory)
        
    asset_items = asset_items_query.all()

    context = {
        "asset_items": asset_items,
        "categories": AssetCategory.objects.all(),
        "subcategories": Subcategory.objects.all(),
        "selected_category": selected_category,
        "selected_subcategory": selected_subcategory,
        "query": query,
        'has_line_account': has_line_account,
    }
    return render(request, "loan_list.html", context)


# ------------------------------
# ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
# ------------------------------
@login_required
def loan_cart(request):
    asset_items = AssetItemLoan.objects.filter(status_borrowing=True)

    context = {
        "asset_items": asset_items
    }
    return render(request, "loan_cart.html", context)


# ------------------------------
# ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå
# ------------------------------
@login_required
def loan_detail_view(request, loan_id):
    loan = get_object_or_404(OrderAssetLoan, pk=loan_id)
    context = {
        'loan': loan,
    }
    return render(request, 'loan_detail.html', context)



# ------------------------------
# ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°
# ------------------------------
@login_required
def confirm_loan(request):
    if request.method == "POST":
        # ‚úÖ ‡∏î‡∏∂‡∏á asset_ids ‡∏à‡∏≤‡∏Å form (‡∏Å‡∏±‡∏ô error ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤)
        asset_ids_str = request.POST.get("asset_ids", "").strip()
        asset_ids = [int(i) for i in asset_ids_str.split(",") if i.isdigit()]

        # ‚úÖ ‡∏î‡∏∂‡∏á assets ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏≤
        assets_in_cart = AssetItemLoan.objects.filter(id__in=asset_ids)

        if not assets_in_cart.exists():
            messages.error(request, "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤")
            return redirect("assets:loan_list")

        # ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        form = LoanForm(request.POST)
        if form.is_valid():
            order = form.save(commit=False)
            order.user = request.user
            order.status = "pending"
            order.save()

            # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ö‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå
            for asset in assets_in_cart:
                IssuingAssetLoan.objects.create(order_asset=order, asset=asset)
                asset.status_assetloan = True
                asset.save(update_fields=["status_assetloan"])  # save ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ field ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô

            # üîî ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô LINE
            try:
                notify_admin_assetloan(request, order.id)
            except Exception as e:
                messages.warning(request, f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏ï‡πà‡∏™‡πà‡∏á LINE ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}")

            messages.success(request, "‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏¢‡∏∑‡∏°‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
            return redirect("assets:loan_list")
        else:
            # ‚úÖ Debug form errors (‡∏Å‡∏±‡∏ô‡∏á‡∏á)
            messages.error(request, f"‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {form.errors.as_json()}")

    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà POST ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏¥‡∏°
    return redirect("assets:loan_list")


# ------------------------------
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≠‡∏á
# ------------------------------
@login_required
def reserve_asset_item(request, pk):
    asset_item = get_object_or_404(AssetItemLoan, pk=pk)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÉ‡∏ä‡πâ logic ‡πÄ‡∏î‡∏¥‡∏°)
    if not asset_item.status_assetloan:
        messages.error(request, "‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏¢‡∏∑‡∏°‡∏≠‡∏¢‡∏π‡πà ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ")
        return redirect('assets:loan_list')
    
    if request.method == "POST":
        form = ReservationForm(request.POST)
        if form.is_valid():
            reserved_date = form.cleaned_data['reserved_date']
            returning_date = form.cleaned_data['returning_date']

            # --- ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ã‡πâ‡∏≥ ---
            conflicting_reservations = AssetReservation.objects.filter(
                asset=asset_item,
                reserved_date__lt=returning_date,
                returning_date__gt=reserved_date
            )

            if conflicting_reservations.exists():
                messages.error(request, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô‡∏à‡∏≠‡∏á‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß‡πÅ‡∏•‡πâ‡∏ß")
                return redirect('assets:loan_list')
            # --- ‡∏à‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ---

            reservation = form.save(commit=False)
            reservation.asset = asset_item
            reservation.user = request.user
            reservation.save()
            messages.success(request, f"‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á '{asset_item.item_name}' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
            return redirect("assets:loan_list")
    else:
        form = ReservationForm()
    
    context = {
        'form': form,
        'asset_item': asset_item,
    }
    return render(request, "reserve_modal.html", context)

# ------------------------------
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏¢‡∏Å‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
# ------------------------------
def count_pending_asset_loans():
    """
    ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏¢‡∏∑‡∏°‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ (‡∏£‡∏ß‡∏°‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏¢‡∏∑‡∏°‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏∑‡∏ô)
    """
    
    # ‡πÉ‡∏ä‡πâ Q object ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    return OrderAssetLoan.objects.filter(
        Q(status='pending') | Q(status='returned_pending')
    ).count()

# ------------------------------
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ñ‡∏∑‡∏ô ‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà
# ------------------------------
@login_required
def loan_approval_list(request):
    month = request.GET.get('month', timezone.now().month)
    year = request.GET.get('year', timezone.now().year)

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ 'q'
    query = request.GET.get('q', '')

    # loans = OrderAssetLoan.objects.filter(month=month, year=year)
    loans = OrderAssetLoan.objects.filter(month=month, year=year).order_by('-id')

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    if query:
        loans = loans.filter(
            Q(id__icontains=query) |
            Q(user__first_name__icontains=query) |
            Q(user__last_name__icontains=query) |
            Q(items__asset__item_name__icontains=query)
            # Q(items__asset__asset_code__icontains=query)
        ).distinct()

    loans = loans.order_by('-id')

    months = [(1,'‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°'),(2,'‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå'),(3,'‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°'),(4,'‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô'),
              (5,'‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°'),(6,'‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô'),(7,'‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°'),(8,'‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°'),
              (9,'‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô'),(10,'‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°'),(11,'‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô'),(12,'‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°')]
    years = range(2020, timezone.now().year+2)

    if request.method == "POST":
        # ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö modal submit
        loan_id = request.POST.get("loan_id")
        loan = get_object_or_404(OrderAssetLoan, pk=loan_id)

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        if loan.status != "returned_pending":
            messages.warning(request, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ")
            return redirect("assets:loan_approval_list")

        status_return = request.POST.get("status_return")
        receiver_note = request.POST.get("receiver_note")

        loan.status = "returned"
        loan.status_return = status_return or "not_damaged"
        loan.received_by = request.user.get_full_name()
        loan.receiver_position = getattr(request.user.profile, "position", "")
        loan.confirm_received = True
        loan.receiver_note = receiver_note
        loan.date_received = timezone.now()
        loan.save()

        # ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
        for issuing in loan.items.all():
            asset = issuing.asset
            next_reservation = AssetReservation.objects.filter(asset=asset).order_by('reserved_date').first()
            if next_reservation:
                auto_loan_order = OrderAssetLoan.objects.create(
                    user=next_reservation.user,
                    date_of_use=next_reservation.reserved_date,
                    date_due=next_reservation.returning_date,
                    status="pending",
                    note=f"‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á: {next_reservation.notes}"
                )
                IssuingAssetLoan.objects.create(order_asset=auto_loan_order, asset=asset)

                # ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
                notify_admin_on_auto_loan(auto_loan_order)
                
                next_reservation.delete()
            else:
                asset.status_assetloan = False
                asset.save()

        messages.success(request, f"‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô Order #{loan.id} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

        # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡∏¢‡∏∑‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô
        notify_borrower(loan, action_type="returned")

        return redirect("assets:loan_approval_list")
    
    # Pagination
    paginator = Paginator(loans, 15)  # ‡πÅ‡∏™‡∏î‡∏á 15 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)


    context = {
        "page_obj": page_obj,
        "months": months,
        "years": years,
        "selected_month": int(month),
        "selected_year": int(year),
        "get_params": request.GET.copy(),  # ‡πÄ‡∏Å‡πá‡∏ö GET params ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö pagination
        "query": query,
        "loan_pending_count": count_pending_asset_loans(), 

    }
    return render(request, "loan_approval_list.html", context)

# ------------------------------
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô ‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô 
# ------------------------------
@login_required
def loan_orders_user(request):
    """
    ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå
    """
    now = datetime.now()
    
    # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏µ‡∏à‡∏≤‡∏Å GET parameter ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    month = int(request.GET.get('month', now.month))
    year_buddhist = int(request.GET.get('year', now.year + 543))
    
    # ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏µ ‡∏û.‡∏®. ‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ.‡∏®. ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    year_ad = year_buddhist - 543

    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ 'q'
    query = request.GET.get('q', '')

    # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô/‡∏õ‡∏µ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    # ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤
    qs = OrderAssetLoan.objects.filter(
        user=request.user, # ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
        month=month,
        year=year_ad
    ).order_by('-date_created')

    # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
    if query:
        qs = qs.filter(
            Q(id__icontains=query) 
        ).distinct()
    
    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
    qs = qs.order_by('-date_created')

    # Pagination
    paginator = Paginator(qs, 15)  # ‡πÅ‡∏™‡∏î‡∏á 15 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)

    context = {
        'page_obj': page_obj,
        'selected_month': month,
        'query': query,
        'selected_year': year_buddhist,
        'years': range(2020 + 543, datetime.now().year + 1 + 543),
        'months': [
            (1, '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°'), (2, '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå'), (3, '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°'), (4, '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô'),
            (5, '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°'), (6, '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô'), (7, '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°'), (8, '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°'),
            (9, '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô'), (10, '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°'), (11, '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô'), (12, '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°')
        ],
        # 'month_name' ‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÉ‡∏ô utils.py
        'month_name': thai_month_name(month),
    }
    return render(request, 'loan_orders_user.html', context)


# ------------------------------
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥/‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏° 
# ------------------------------
@login_required
def loan_approval(request, pk):
    loan = get_object_or_404(OrderAssetLoan, pk=pk)

    if request.method == "POST":
        action = request.POST.get("status")

        # ‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°
        if action == "approved" and loan.status == "pending":
            loan.status = "approved"
            loan.date_approved = timezone.now()

            loan.approved_by = request.user.get_full_name()
            if hasattr(request.user, "profile"):
                loan.approver_position = request.user.profile.position
            else:
                loan.approver_position = ""

            loan.save()
            messages.success(request, "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‚úÖ")
            
            # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
            notify_borrower(loan, action_type="approved")

        # ‡∏Å‡∏£‡∏ì‡∏µ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°
        elif action == "rejected" and loan.status == "pending":
            loan.status = "rejected"
            loan.date_updated = timezone.now()

            loan.approved_by = request.user.get_full_name()
            if hasattr(request.user, "profile"):
                loan.approver_position = request.user.profile.position
            else:
                loan.approver_position = ""

            note_text = request.POST.get("note", "")
            if note_text:
                loan.note = f"‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò: {note_text}"

            loan.save()

            for issuing in loan.items.all():
                asset = issuing.asset
                next_reservation = AssetReservation.objects.filter(asset=asset).order_by("reserved_date").first()

                if next_reservation:
                    auto_loan_order = OrderAssetLoan.objects.create(
                        user=next_reservation.user,
                        date_of_use=next_reservation.reserved_date,
                        date_due=next_reservation.returning_date,
                        status="pending",
                        note=f"‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á (‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò): {next_reservation.notes or ''}"
                    )
                    IssuingAssetLoan.objects.create(order_asset=auto_loan_order, asset=asset)
                    next_reservation.delete()
                else:
                    asset.status_assetloan = False
                    asset.save()

            messages.error(request, "‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‚ùå")
            
            # ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò
            notify_borrower(loan, action_type="rejected")

        else:
            messages.warning(request, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ")

    return redirect("assets:loan_approval_list")



# ------------------------------
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô
# ------------------------------
@login_required
def loan_approval_user(request, pk):
    loan = get_object_or_404(OrderAssetLoan, pk=pk)

    if request.method == "POST":
        action = request.POST.get("status")

        # ‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå
        if action == "returned_pending":
            loan.status = "returned_pending"
            loan.returned_by = loan.user.get_full_name()  # ‡∏´‡∏£‡∏∑‡∏≠ loan.user.username
            loan.date_returned = timezone.now()
            loan.save()

            # ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô
            notify_admin_on_return(loan)
            
            messages.success(request, f"‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå Order #{loan.id} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

        # ‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°
        elif action == "cancel":
            loan.status = "cancel"
            loan.save()

            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            issued_items = loan.items.all()
            for item in issued_items:
                asset = item.asset
                next_reservation = AssetReservation.objects.filter(asset=asset).order_by('reserved_date').first()
                if next_reservation:
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
                    auto_loan_order = OrderAssetLoan.objects.create(
                        user=next_reservation.user,
                        date_of_use=next_reservation.reserved_date,
                        date_due=next_reservation.returning_date,
                        status="pending",  # ‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
                        note=f"‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á: {next_reservation.notes}"
                    )
                    IssuingAssetLoan.objects.create(order_asset=auto_loan_order, asset=asset)

                    # ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
                    notify_admin_on_auto_loan(auto_loan_order)

                    # ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
                    next_reservation.delete()
                else:
                    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ asset ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡πà‡∏≤‡∏á
                    asset.status_assetloan = False
                    asset.save()

            messages.success(request, f"Order #{loan.id} ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á/‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÅ‡∏•‡πâ‡∏ß")

        return redirect("assets:loan_orders_user")

    return redirect("assets:loan_orders_user")



# ------------------------------
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà
# ------------------------------
@login_required
def approve_return(request, loan_id):
    loan = get_object_or_404(OrderAssetLoan, pk=loan_id)

    if loan.status != "returned_pending":
        messages.warning(request, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏î‡πâ")
        return redirect("assets:loan_approval_list")

    if request.method == "POST":
        status_return = request.POST.get("status_return")
        receiver_note = request.POST.get("receiver_note")

        # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô
        loan.status = "returned"
        loan.status_return = status_return or "not_damaged"
        loan.received_by = request.user.get_full_name()
        loan.receiver_position = getattr(request.user, "position", "")
        loan.confirm_received = True
        loan.receiver_note = receiver_note
        loan.date_received = timezone.now()
        loan.save()

        # ‡∏Ñ‡∏∑‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå
        for issuing in loan.items.all():
            asset = issuing.asset
            next_reservation = AssetReservation.objects.filter(asset=asset).order_by('reserved_date').first()
            if next_reservation:
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
                auto_loan_order = OrderAssetLoan.objects.create(
                    user=next_reservation.user,
                    date_of_use=next_reservation.reserved_date,
                    date_due=next_reservation.returning_date,
                    status="pending",
                    note=f"‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á: {next_reservation.notes}"
                )
                IssuingAssetLoan.objects.create(order_asset=auto_loan_order, asset=asset)

                # ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
                notify_admin_on_auto_loan(auto_loan_order)

                next_reservation.delete()
            else:
                # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ
                asset.status_assetloan = False
                asset.save()

        messages.success(request, f"‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô Order #{loan.id} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
        return redirect("assets:loan_approval_list")
    return redirect("assets:loan_approval_list")



# --------------------------------------------------------------------------------------------

# ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
def asset_list_cate(request):
    query = request.GET.get('q')  # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å input ‡∏ä‡∏∑‡πà‡∏≠ 'q'

    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    if query:
        categories = AssetCategory.objects.filter(
            Q(name_cate__icontains=query)
        )
    else:
        categories = AssetCategory.objects.all()

    # ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á POST ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
    if request.method == 'POST':
        form = CategoryForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, '‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß')
            return redirect('assets:asset_list_cate')
        else:
            messages.error(request, '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏´‡∏•‡∏±‡∏Å‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')
    else:
        form = CategoryForm()


    page = request.GET.get('page')

    p = Paginator(categories, 5)
    try:
        categories = p.page(page)
    except:
        categories = p.page(1)

    return render(request, 'asset_list_cate.html', {
        'categories': categories,
        'form': form,
        'query': query,  # ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏õ‡∏¢‡∏±‡∏á template ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    })

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
def add_category_asset(request):
    if request.method == 'POST':
        form = CategoryForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, '‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß')
            return redirect('assets:add_category_asset')
        else:
            messages.error(request, '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏´‡∏•‡∏±‡∏Å‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')
    else:
        form = CategoryForm()
    return render(request, 'add_category_asset.html', {'form': form})

# ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
def edit_category_asset(request, pk):
    category = get_object_or_404(AssetCategory, pk=pk)
    if request.method == 'POST':
        form = CategoryForm(request.POST, instance=category)
        if form.is_valid():
            form.save()
            messages.success(request, '‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß')
            return redirect('assets:asset_list_cate')
        else:
            messages.error(request, '‚ùå ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')
    else:
        form = CategoryForm(instance=category)

    return render(request, 'asset_list_cate.html', {'form': form})

# ‡∏•‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏´‡∏•‡∏±‡∏Å
def delete_category_asset(request, pk):
    category = get_object_or_404(AssetCategory, pk=pk)
    category.delete()
    messages.success(request, 'üóë ‡∏•‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß')
    return redirect('assets:asset_list_cate')

# --------------------------------------------------------------------------------------------


# ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏¢‡πà‡∏≠‡∏¢
def asset_list_subcate(request):
    query = request.GET.get('q')

    # ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ: ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ subcategories_list ‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô
    if query:
        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        subcategories_list = Subcategory.objects.filter(
            Q(name_sub__icontains=query) |
            Q(category__name_cate__icontains=query)
        ).order_by('id')
    else:
        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        subcategories_list = Subcategory.objects.all().order_by('id')

    # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Modal (‡πÅ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å Paginator)
    categories = AssetCategory.objects.all()

    if request.method == 'POST':
        form = SubcategoryForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, '‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏¢‡πà‡∏≠‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß')
            return redirect('assets:asset_list_subcate')
        else:
            messages.error(request, '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏¢‡πà‡∏≠‡∏¢‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')
    else:
        form = SubcategoryForm()

    page = request.GET.get('page')

    # ‚úÖ Paginator ‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏Å subcategories_list ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏™‡∏°‡∏≠
    p = Paginator(subcategories_list, 10)
    try:
        subcategories = p.page(page)
    except PageNotAnInteger:
        subcategories = p.page(1)
    except EmptyPage:
        subcategories = p.page(p.num_pages)

    return render(request, 'asset_list_subcate.html', {
        'subcategories': subcategories,
        'categories': categories,
        'form': form,
        'query': query,
    })

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏¢‡πà‡∏≠‡∏¢
def add_subcategory_asset(request):
    if request.method == 'POST':
        form = SubcategoryForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, '‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏¢‡πà‡∏≠‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß')
            return redirect('assets:add_subcategory_asset')
        else:
            messages.error(request, '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏¢‡πà‡∏≠‡∏¢‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')
    else:
        form = SubcategoryForm()
    return render(request, 'add_subcategory_asset.html', {'form': form})

# ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏¢‡πà‡∏≠‡∏¢
def edit_subcategory_asset(request, pk):
    category = get_object_or_404(Subcategory, pk=pk)
    if request.method == 'POST':
        form = SubcategoryForm(request.POST, instance=category)
        if form.is_valid():
            form.save()
            messages.success(request, '‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏¢‡πà‡∏≠‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß')
            return redirect('assets:asset_list_subcate')
        else:
            messages.error(request, '‚ùå ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')
    else:
        form = SubcategoryForm(instance=category)

    return render(request, 'asset_list_subcate.html', {'form': form})

# ‡∏•‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏¢‡πà‡∏≠‡∏¢
def delete_subcategory_asset(request, pk):
    subcategory = get_object_or_404(Subcategory, pk=pk)
    subcategory.delete()
    messages.success(request, 'üóë ‡∏•‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏¢‡πà‡∏≠‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß')
    return redirect('assets:asset_list_subcate')

# --------------------------------------------------------------------------------------------


# ‡∏£‡∏≤‡∏¢‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
def asset_list_storage_location(request):
    query = request.GET.get('q')  # ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å input ‡∏ä‡∏∑‡πà‡∏≠ 'q'

    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    if query:
        storagelocations = StorageLocation.objects.filter(
            Q(name__icontains=query)
        )
    else:
        storagelocations = StorageLocation.objects.all()

    if request.method == 'POST':
        form = StorageLocationForm(request.POST)
        if form.is_valid():
            form.save()
            messages.success(request, '‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß')
            return redirect('assets:asset_list_storage_location')
        else:
            messages.error(request, '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')
    else:
        form = StorageLocationForm()

    return render(request, 'asset_list_location.html', {
        'storagelocations': storagelocations,
        'form': form,
        'query': query,  # ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏õ‡∏¢‡∏±‡∏á template ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    })


# ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå
def edit_storage_location_asset(request, pk):
    storagelocation = get_object_or_404(StorageLocation, pk=pk)  # ‚úÖ Model ‡∏ä‡∏∑‡πà‡∏≠ StorageLocation

    if request.method == 'POST':
        form = StorageLocationForm(request.POST, instance=storagelocation)
        if form.is_valid():
            form.save()
            messages.success(request, '‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß')
            return redirect('assets:asset_list_storage_location')
        else:
            messages.error(request, '‚ùå ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')
    else:
        form = StorageLocationForm(instance=storagelocation)

    return render(request, 'asset_list_location.html', {'form': form})


# ‚úÖ ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå
def delete_storage_location_asset(request, pk):
    storagelocation = get_object_or_404(StorageLocation, pk=pk)  # ‚úÖ Model ‡∏ä‡∏∑‡πà‡∏≠ StorageLocation
    storagelocation.delete()
    messages.success(request, 'üóë ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏£‡∏∏‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß')
    return redirect('assets:asset_list_storage_location')  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö url ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
